# https://docs.github.com/en/actions

name: "Release"

on: # yamllint disable-line rule:truthy
  push:
    tags:
      - "**"

jobs:
  release:
    name: "Release"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.1"

        dependencies:
          - "locked"

    env:
      GPG_KEYS: ".build/phar/keys.asc"
      GPG_KEYS_ENCRYPTED: "phar/keys.asc.gpg"
      PHPUNIT_SLOW_TEST_DETECTOR_PHAR: ".build/phar/phpunit-slow-test-detector.phar"
      PHPUNIT_SLOW_TEST_DETECTOR_PHAR_SIGNATURE: ".build/phar/phpunit-slow-test-detector.phar.asc"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3.5.2"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.25.3"
        with:
          coverage: "none"
          extensions: "none, ctype, curl, dom, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"
          tools: "phive"

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.1"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Remove phpunit/phpunit"
        run: "composer remove phpiunit/phpunit --ansi --no-interaction --no-progress"

      - name: "Install dependencies with phive"
        uses: "ergebnis/.github/actions/phive/install@1.8.0"
        with:
          trust-gpg-keys: "0x2DF45277AEF09A2F,0x033E5F8D801A2F8D,0x4AA394086372C20A"

      - name: "Validate configuration for humbug/box"
        run: ".phive/box validate box.json --ansi"

      - name: "Compile phpunit-slow-test-detector.phar with humbug/box"
        run: ".phive/box compile --ansi --config=box.json"

      - name: "Show info about phpunit-slow-test-detector.phar with humbug/box"
        run: ".phive/box info ${{ env.PHPUNIT_SLOW_TEST_DETECTOR_PHAR }} --ansi"

      - name: "Run phar tests with phpunit/phpunit"
        run: ".phive/phpunit --colors=always --configuration=test/Phar/phpunit.xml"

      - name: "Show gpg version"
        run: "gpg --version"

      - name: "Decrypt keys.asc.gpg with gpg"
        run: "gpg --batch --output ${{ env.GPG_KEYS }} --passphrase \"${{ secrets.GPG_DECRYPT_PASSPHRASE }}\" --yes --decrypt ${{ env.GPG_KEYS_ENCRYPTED }}"

      - name: "Import keys from keys.asc with gpg"
        run: "gpg --batch --import ${{ env.GPG_KEYS }}"

      - name: "Sign phpunit-slow-test-detector.phar with gpg"
        run: "gpg --armor --local-user \"${{ secrets.GPG_LOCAL_USER }}\" --output ${{ env.PHPUNIT_SLOW_TEST_DETECTOR_PHAR_SIGNATURE }} --passphrase \"${{ secrets.GPG_KEY_PASSPHRASE }}\" --pinentry-mode loopback --yes --detach-sig ${{ env.PHPUNIT_SLOW_TEST_DETECTOR_PHAR }}"

      - name: "Remove decrypted keys.asc"
        run: "rm ${{ env.GPG_KEYS }}"

      - name: "Determine tag"
        run: "echo \"RELEASE_TAG=${GITHUB_REF#refs/tags/}\" >> $GITHUB_ENV"

      - name: "Create release"
        uses: "ergebnis/.github/actions/github/release/create@1.8.0"
        with:
          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"

      - name: "Upload release assets"
        uses: "actions/github-script@v6.4.1"
        with:
          github-token: "${{ secrets.ERGEBNIS_BOT_TOKEN }}"
          script: |
            const fs = require("fs");

            const files = [
              {
                name: "phpunit-slow-test-detector.phar",
                path: process.env.PHPUNIT_SLOW_TEST_DETECTOR_PHAR,
              },
              {
                name: "phpunit-slow-test-detector.phar.asc",
                path: process.env.PHPUNIT_SLOW_TEST_DETECTOR_PHAR_SIGNATURE,
              },
            ];

            for (const file of files) {
              try {
                await github.rest.repos.uploadReleaseAsset({
                  data: fs.readFileSync(file.path),
                  name: file.name,
                  origin: process.env.RELEASE_UPLOAD_URL,
                  owner: context.repo.owner,
                  release_id: process.env.RELEASE_ID,
                  repo: context.repo.repo,
                });
              } catch (error) {
                core.setFailed(error.message);
              }
            }
