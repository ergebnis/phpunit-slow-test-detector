# https://docs.github.com/en/actions

name: "Integrate"

on: # yamllint disable-line rule:truthy
  pull_request: null
  push:
    branches:
      - "main"

jobs:
  code-coverage:
    name: "Code Coverage"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "7.4"

        phpunit-version:
          - "8.5.19"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.1"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.28.0"
        with:
          coverage: "xdebug"
          extensions: "none, ctype, curl, dom, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Set up problem matchers for phpunit/phpunit"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Remove incompatible dependencies with composer"
        run: "composer remove ergebnis/php-cs-fixer-config psalm/plugin-phpunit vimeo/psalm --ansi --dev --no-interaction --no-progress"

      - name: "Require phpunit/phpunit:^${{ matrix.phpunit-version }}"
        run: "composer require phpunit/phpunit:^${{ matrix.phpunit-version }} --ansi --no-interaction --no-progress --update-with-all-dependencies"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Collect code coverage with Xdebug and phpunit/phpunit"
        env:
          XDEBUG_MODE: "coverage"
        run: "vendor/bin/phpunit --colors=always --configuration=test/Unit/phpunit.xml --coverage-clover=.build/phpunit/logs/clover.xml"

      - name: "Send code coverage report to codecov.io"
        uses: "codecov/codecov-action@v3.1.4"
        with:
          files: ".build/phpunit/logs/clover.xml"
          token: "${{ secrets.CODECOV_TOKEN }}"

  coding-standards:
    name: "Coding Standards"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.1"

      - name: "Lint YAML files"
        uses: "ibiqlik/action-yamllint@v3.1.1"
        with:
          config_file: ".yamllint.yaml"
          file_or_dir: "."
          strict: true

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.28.0"
        with:
          coverage: "none"
          extensions: "none, ctype, curl, dom, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Run ergebnis/composer-normalize"
        run: "composer normalize --ansi --dry-run"

      - name: "Create cache directory for friendsofphp/php-cs-fixer"
        run: "mkdir -p .build/php-cs-fixer/"

      - name: "Cache cache directory for friendsofphp/php-cs-fixer"
        uses: "actions/cache@v3.3.2"
        with:
          path: ".build/php-cs-fixer"
          key: "php-${{ matrix.php-version }}-php-cs-fixer-${{ github.ref_name }}"
          restore-keys: |
            php-${{ matrix.php-version }}-php-cs-fixer-main
            php-${{ matrix.php-version }}-php-cs-fixer-

      - name: "Run friendsofphp/php-cs-fixer"
        run: "vendor/bin/php-cs-fixer fix --ansi --config=.php-cs-fixer.php --diff --dry-run --verbose"

  compile-phar:
    name: "Compile Phar"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "8.1"

        dependencies:
          - "locked"

    env:
      PHPUNIT_SLOW_TEST_DETECTOR_PHAR: ".build/phar/phpunit-slow-test-detector.phar"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.1"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.28.0"
        with:
          coverage: "none"
          extensions: "none, ctype, curl, dom, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          ini-values: "memory_limit=-1, phar.readonly=0"
          php-version: "${{ matrix.php-version }}"
          tools: "phive"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Remove incompatible dependencies with composer"
        run: "composer remove ergebnis/php-cs-fixer-config psalm/plugin-phpunit vimeo/psalm --ansi --dev --no-interaction --no-progress"

      - name: "Remove phpunit/phpunit with composer"
        run: "composer remove phpunit/phpunit --ansi --no-interaction --ignore-platform-reqs --no-progress"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Remove git placeholder configuration with jq"
        run: "echo $(cat box.json | jq 'del(.git)') > box.json"

      - name: "Install dependencies with phive"
        uses: "ergebnis/.github/actions/phive/install@1.8.0"
        with:
          trust-gpg-keys: "0x2DF45277AEF09A2F,0x033E5F8D801A2F8D,0x4AA394086372C20A"

      - name: "Validate configuration for humbug/box"
        run: ".phive/box validate box.json --ansi"

      - name: "Compile phpunit-slow-test-detector.phar with humbug/box"
        run: ".phive/box compile --ansi --config=box.json"

      - name: "Show info about phpunit-slow-test-detector.phar with humbug/box"
        run: ".phive/box info ${{ env.PHPUNIT_SLOW_TEST_DETECTOR_PHAR }} --ansi --list"

      - name: "Run phar tests with phpunit/phpunit"
        run: ".phive/phpunit --colors=always --configuration=test/Phar/phpunit.xml"

  dependency-analysis:
    name: "Dependency Analysis"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.1"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.28.0"
        with:
          coverage: "none"
          extensions: "none, ctype, curl, dom, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"
          tools: "phive"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Install dependencies with phive"
        uses: "ergebnis/.github/actions/phive/install@1.8.0"
        with:
          trust-gpg-keys: "0x2DF45277AEF09A2F,0x033E5F8D801A2F8D,0x4AA394086372C20A"

      - name: "Run maglnet/composer-require-checker"
        run: ".phive/composer-require-checker check --ansi --config-file=$(pwd)/composer-require-checker.json --verbose"

  refactoring:
    name: "Refactoring"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.1"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.28.0"
        with:
          coverage: "none"
          extensions: "none, ctype, curl, dom, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Create cache directory for rector/rector"
        run: "mkdir -p .build/rector/"

      - name: "Cache cache directory for rector/rector"
        uses: "actions/cache@v3.3.2"
        with:
          path: ".build/rector"
          key: "php-${{ matrix.php-version }}-rector-${{ github.ref_name }}"
          restore-keys: |
            php-${{ matrix.php-version }}-rector-main
            php-${{ matrix.php-version }}-rector-

      - name: "Run automated refactoring with rector/rector"
        run: "vendor/bin/rector --ansi --config=rector.php --dry-run"

  security-analysis:
    name: "Security Analysis"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.1"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.28.0"
        with:
          coverage: "none"
          extensions: "none, ctype, curl, dom, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Check installed packages for security vulnerability advisories"
        run: "composer audit --ansi"

  static-code-analysis:
    name: "Static Code Analysis"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.1"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.28.0"
        with:
          coverage: "none"
          extensions: "none, ctype, curl, dom, json, mbstring, opcache, pcntl, phar, posix, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Create cache directory for vimeo/psalm"
        run: "mkdir -p .build/psalm/"

      - name: "Run vimeo/psalm"
        run: "vendor/bin/psalm --config=psalm.xml --output-format=github --shepherd --show-info=false --stats --threads=4"

  tests:
    name: "Tests"

    runs-on: "ubuntu-latest"

    timeout-minutes: 5

    strategy:
      fail-fast: false
      matrix:
        php-version:
          - "7.4"
          - "8.0"
          - "8.1"
          - "8.2"
          - "8.3"

        phpunit-version:
          - "8.5.19"
          - "9.0.0"

        dependencies:
          - "lowest"
          - "locked"
          - "highest"

        include:
          - php-version: "8.1"
            phpunit-version: "10.0.0"
            dependencies: "lowest"

          - php-version: "8.1"
            phpunit-version: "10.0.0"
            dependencies: "locked"

          - php-version: "8.1"
            phpunit-version: "10.0.0"
            dependencies: "highest"

          - php-version: "8.2"
            phpunit-version: "10.0.0"
            dependencies: "lowest"

          - php-version: "8.2"
            phpunit-version: "10.0.0"
            dependencies: "locked"

          - php-version: "8.2"
            phpunit-version: "10.0.0"
            dependencies: "highest"

          - php-version: "8.3"
            phpunit-version: "10.0.0"
            dependencies: "lowest"

          - php-version: "8.3"
            phpunit-version: "10.0.0"
            dependencies: "locked"

          - php-version: "8.3"
            phpunit-version: "10.0.0"
            dependencies: "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v4.1.1"

      - name: "Set up PHP"
        uses: "shivammathur/setup-php@2.28.0"
        with:
          coverage: "none"
          extensions: "none, ctype, curl, dom, json, mbstring, phar, simplexml, tokenizer, xml, xmlwriter"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for PHP"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/php.json\""

      - name: "Set up problem matchers for phpunit/phpunit"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

      - name: "Validate composer.json and composer.lock"
        run: "composer validate --ansi --strict"

      - name: "Determine composer cache directory"
        uses: "ergebnis/.github/actions/composer/determine-cache-directory@1.8.0"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v3.3.2"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-phpunit-${{ matrix.phpunit-version }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-phpunit-${{ matrix.phpunit-version }}-"

      - name: "Remove platform configuration with composer"
        run: "composer config platform.php --ansi --unset"

      - name: "Remove incompatible dependencies with composer"
        run: "composer remove ergebnis/php-cs-fixer-config psalm/plugin-phpunit vimeo/psalm --ansi --dev --no-interaction --no-progress"

      - name: "Require phpunit/phpunit:^${{ matrix.phpunit-version }}"
        run: "composer require phpunit/phpunit:^${{ matrix.phpunit-version }} --ansi --no-interaction --no-progress --update-with-all-dependencies"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "ergebnis/.github/actions/composer/install@1.8.0"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Run unit tests with phpunit/phpunit:8.5.19"
        if: "matrix.phpunit-version == '8.5.19'"
        run: "vendor/bin/phpunit --colors=always --configuration=test/Unit/phpunit.xml"

      - name: "Run end-to-end tests with phpunit/phpunit:8.5.19"
        if: "matrix.phpunit-version == '8.5.19'"
        run: "vendor/bin/phpunit --colors=always --configuration=test/EndToEnd/Version8/phpunit.xml"

      - name: "Run end-to-end tests with phpunit/phpunit:9.0.0"
        if: "matrix.phpunit-version == '9.0.0'"
        run: "vendor/bin/phpunit --colors=always --configuration=test/EndToEnd/Version9/phpunit.xml"

      - name: "Run end-to-end tests with phpunit/phpunit:10.0.0"
        if: "matrix.phpunit-version == '10.0.0'"
        run: "vendor/bin/phpunit --colors=always --configuration=test/EndToEnd/Version10/phpunit.xml"
